Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVZ15nwH5qG8LiwUOFRI8ck93TGhB_sW
"""

from google.colab import files
files.upload()

import pandas as pd
df = pd.read_csv('resultadosFinalesStop.csv')

training = df.iloc[:1000,:]
testing = df.iloc[1000:,:]

inputsTraining = training.drop('Class', axis='columns')
inputsTesting = testing.drop('Class', axis='columns')
targetTraining = training['Class']
targetTesting = testing['Class']

inputs = df.drop('Class', axis='columns')
target = df['Class']

inputs = inputs.drop(['Text'], axis='columns')
inputsTraining = inputsTraining.drop(['Text'], axis='columns')
inputsTesting = inputsTesting.drop(['Text'], axis='columns')

from sklearn import tree
model = tree.DecisionTreeClassifier()

model.fit(inputsTraining, targetTraining)

model.score(inputsTraining, targetTraining)

inputs_dict = inputsTesting.to_dict('series')

w=[]
for key in inputs_dict.keys():
  w.append(key)
len(w)

#Pasa el diccionario a una lista de vectores 
f=[]

for l in range(1000, 1500):
  d=[]
  for k in range(len(w)):
    g=w[k]
    h = inputs_dict[g][l]
    d.append(h)
  f.append(d)
len(f)

classes=[]
for m in range(len(f)):
  res=model.predict([f[m]])
  a_list = list(res)
  classes.append(a_list[0])

len(classes)

res=pd.DataFrame()

for i in range(len(f)):
  resultados = pd.DataFrame({'Clase real': [targetTesting[i+1000]], 'Clase asignada': [classes[i]]})
  res=res.append(resultados)

res

resultadosClases=[]
realClasses=[]

for i in range(len(f)):
  values = {"Clase real": targetTesting[i+1000], "Clase asignada": classes[i]}
  realClasses.append(targetTesting[i+1000])
  resultadosClases.append(values)

# valores de tabla de matriz de confusion
TN = 0
FN = 0
FP = 0
TP = 0
# valores de los porcentajes
porcentajeCorrecto = 0
porcentajeIncorrecto = 0

for a in range(len(resultadosClases)):
    if int(resultadosClases[a]['Clase real']) == resultadosClases[a]['Clase asignada']:
        porcentajeCorrecto += 1
        if int(resultadosClases[a]['Clase asignada']) == 1:
            TP += 1
        elif int(resultadosClases[a]['Clase asignada']) == 0:
            TN += 1
    elif int(resultadosClases[a]['Clase real']) == 1 and resultadosClases[a]['Clase asignada'] == 0:
        FN += 1
        porcentajeIncorrecto += 1
    elif int(resultadosClases[a]['Clase real']) == 0 and resultadosClases[a]['Clase asignada'] == 1:
        FP += 1
        porcentajeIncorrecto += 1

print("Matriz de confusi贸n")
print('               |', ' 1 ', '|', ' 0 ')
print(' Xen贸fobico    | ', TP , ' | ', FP)
print(' No Xenof贸bico | ', FN , ' | ', TN)

# Porcentajes
print("\nPorcentaje correcto= ", (porcentajeCorrecto / len(resultadosClases))*100)
print("\nPorcentaje incorrecto= ", (porcentajeIncorrecto / len(resultadosClases))*100)

P= TP/(TP+FP)
R= TP/(TP+FN)
print("\nPrecisi贸n= ", P)
print("\nRecuerdo= ", R)
print("\nF-score= ", 2*((P*R)/(P+R)))

from sklearn.metrics import confusion_matrix
confusion_matrix(realClasses, classes)

from sklearn.metrics import classification_report
print(classification_report(realClasses, classes))

files.upload()

dfT = pd.read_csv('resultadosFinalesStopTest.csv')
len(dfT)

inputsTestingT = dfT.drop('Class', axis='columns')

modelT = tree.DecisionTreeClassifier()

modelT.fit(inputs, target)

tweets_dict = inputsTestingT.to_dict('series')

#Pasa el diccionario a una lista de vectores 
a=[]

for l in range(len(dfT)):
  d=[]
  for k in range(len(w)):
    g=w[k]
    h = tweets_dict[g][l]
    d.append(h)
  a.append(d)
len(a)

classes=[]
for m in range(len(a)):
  res=model.predict([a[m]])
  a_list = list(res)
  classes.append(a_list[0])

dfT['Class'] = classes
dfT